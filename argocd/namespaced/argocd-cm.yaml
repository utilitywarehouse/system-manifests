# reference: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-cm
data:
  users.anonymous.enabled: "false"
  users.session.duration: "12h"
  admin.enabled: "false" # disables admin user. Admin is enabled by default
  oidc.tls.insecure.skip.verify: "false"

  # A set of settings that allow enabling or disabling the config management tool.
  # If unset, each defaults to "true".
  kustomize.enabled: "true"
  jsonnet.enabled: "false"
  helm.enabled: "false"

  # The metadata.label key name where Argo CD injects the app name as a tracking label (optional).
  # Tracking labels are used to determine which resources need to be deleted when pruning.
  # If omitted, Argo CD injects the app name into the label: 'app.kubernetes.io/instance'
  application.instanceLabelKey: argocd.argoproj.io/instance
  application.resourceTrackingMethod: annotation

  # Application reconciliation timeout is the max amount of time required to discover if a new manifests version got
  # published to the repository. Reconciliation by timeout is disabled if timeout is set to 0. Three minutes by default.
  # > Note: argocd-repo-server deployment must be manually restarted after changing the setting.
  timeout.reconciliation: 60s

  # exec.enabled indicates whether the UI exec feature is enabled. It is disabled by default.
  exec.enabled: "true"
  # exec.shells restricts which shells are allowed for `exec`, and in which order they are attempted
  exec.shells: "sh,bash"

  resource.customizations.health.networking.k8s.io_Ingress: |
    hs = {}
    hs.status = "Healthy"
    hs.message = "health check skipped"
    return hs

  resource.customizations.health.cert-manager.io_Certificate: |
    hs = {}
    if obj.status ~= nil then
      if obj.status.conditions ~= nil then
        for i, condition in ipairs(obj.status.conditions) do
          if condition.type == "Ready" and condition.status == "False" then
            hs.status = "Degraded"
            hs.message = condition.message
            return hs
          end
          if condition.type == "Ready" and condition.status == "True" then
            hs.status = "Healthy"
            hs.message = condition.message
            return hs
          end
        end
      end
    end
    hs.status = "Progressing"
    hs.message = "Waiting for certificate"
    return hs
