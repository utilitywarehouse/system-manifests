# make sure the 'name' label on namespaces matches the actual name of the namespace
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: NameLabelMatch
metadata:
  name: namespace-label-name-match
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Namespace"]
---
# block namespace delete requests unless the namespace is annotated with uw.systems/delete-allowed: "true"
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: DeleteAnnotationRequirement
metadata:
  name: namespace-delete-allowed-annotation
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Namespace"]
  parameters:
    name: "uw.systems/delete-allowed"
    value: "true"
---
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sRequiredLabels
metadata:
  name: namespace-owner-label-present
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Namespace"]
  parameters:
    message: >-
      All namespaces must have a `uw.systems/owner` label that corresponds to
      the name of the team. A list of valid team names can be found here:
      https://github.com/utilitywarehouse/documentation/tree/master/infra#structure
    labels:
      - key: "uw.systems/owner"
        allowedRegex: "^(bill|billing|btg-operations|btg-security|cbc|contact-channels|crm|customer|customer-platform|data|digital-support|energy|insurance|partner|payment|system|telecom|unicom)$"
---
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: RestrictedTaintToleration
metadata:
  name: master
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    excludedNamespaces:
      - kube-system
      - sys-*
  parameters:
    restrictedTaint:
      key: node-role.kubernetes.io/master
      effect: NoSchedule
    allowGlobalToleration: false
---
# prevent ingresses from hijacking the default traefik route by requiring an
# explicit host value
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: IngressRequireHost
metadata:
  name: ingress-require-host
spec:
  match:
    kinds:
      - apiGroups: ["*"]
        kinds: ["Ingress"]
---
# prevent ingressroutetcps from hijacking all traffic by preventing wildcard
# HostSNIs
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: IngressRouteMatchRestriction
metadata:
  name: wildcard-hostsni
spec:
  match:
    kinds:
      - apiGroups: ["traefik.containo.us"]
        kinds: ["IngressRouteTCP"]
  parameters:
    message: "HostSNI rules must not contain a wildcard host '*'"
    matchRegex: "HostSNI\\(.*(`\\*`)+.*\\)"
    exceptions: []
---
# using || can allow you to subvert other restrictions and hijack traffic with
# non-specific rules that match generic paths or headers
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: IngressRouteMatchRestriction
metadata:
  name: or-operator
spec:
  match:
    kinds:
      - apiGroups: ["traefik.containo.us"]
        kinds: ["IngressRoute", "IngressRouteTCP"]
  parameters:
    message: "Route matches must not contain ||"
    matchRegex: "\\|\\|"
    exceptions: []
---
# The regular expression used here was adapted from the validation Kubernetes
# performs on the host field of Ingress rules, which adheres to RFC 1123:
# - https://github.com/kubernetes/kubernetes/blob/18856dace935db46d3ba84374ce23438922e272b/staging/src/k8s.io/apimachinery/pkg/util/validation/validation.go#L198
#
# That validation is wrapped in patterns that match the following forms:
# - Host(`<host>`)
# - Host(`<host>`, `<host>`...)
#
# The use of the 'inverse' parameter here, combined with this pattern, makes it
# so that every IngressRoute match must contain a specific host with a valid hostname
# as defined by RFC 1123.
#
# By requiring a Host rule, we prevent widespread hijacking by non-specific
# rules like PathPrefix(`/`).
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: IngressRouteMatchRestriction
metadata:
  name: require-host
spec:
  match:
    kinds:
      - apiGroups: ["traefik.containo.us"]
        kinds: ["IngressRoute"]
  parameters:
    message: "All route matches must contain a Host rule with valid hostnames as defined by RFC 1123"
    matchRegex: "Host\\((`(([a-zA-Z0-9]{1,})|([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\\.)+[a-z]{2,})`(, ?)?)+\\)"
    inverse: true
    exceptions: []
---
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: AnnotationValidation
metadata:
  name: vault-aws-role-arn
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["ServiceAccount"]
  parameters:
    message: "The annotation `vault.uw.systems/aws-role` must contain a valid role arn"
    annotations:
      - key: "vault.uw.systems/aws-role"
        # adapted from: https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateRole.html
        allowedRegex: '^arn:aws:iam::[0-9]+:role((/)|(/[\x21-\x7f]+/))[\w+=,.@-]+$'
---
# Mitigates CVE-2020-8554 by preventing the use of any externalIPs on services
#  - https://www.stackrox.com/post/2020/12/cve-2020-8554-man-in-the-middle-vulnerability-in-kubernetes-top-recommendations/
#  - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8554
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sExternalIPs
metadata:
  name: "allowed-external-ips"
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Service"]
  parameters:
    allowedIPs: []
---
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: SemaphoreMirrorNameLength
metadata:
  name: "mirror-name-length"
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Service"]
    labelSelector:
      matchLabels:
        uw.systems/mirror: "true"
  parameters:
    matchLabels:
      uw.systems/mirror: "true"
    prefixes:
      - aws
      - gcp
      - merit
---
# Block the use of NodePort services
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: BlockNodePort
metadata:
  name: block-node-port
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Service"]
  parameters:
    exceptions: []
---
# block non-system pods from being scheduled onto master nodes
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: PodNodeRestriction
metadata:
  name: "master"
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    excludedNamespaces:
      - kube-system
      - sys-*
  parameters:
    message: "Pod is not allowed to be scheduled onto master nodes"
    matchLabels:
      node-role.kubernetes.io/master: ""
