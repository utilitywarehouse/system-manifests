---
# Source: aws-privateca-issuer/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aws-privateca-issuer
  namespace: kube-system
  labels:
    helm.sh/chart: aws-privateca-issuer-v1.2.7
    app.kubernetes.io/name: aws-privateca-issuer
    app.kubernetes.io/instance: v1.2.7
    app.kubernetes.io/version: "v1.2.7"
    app.kubernetes.io/managed-by: Helm
---
# Source: aws-privateca-issuer/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: aws-privateca-issuer
  labels:
    helm.sh/chart: aws-privateca-issuer-v1.2.7
    app.kubernetes.io/name: aws-privateca-issuer
    app.kubernetes.io/instance: v1.2.7
    app.kubernetes.io/version: "v1.2.7"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
      - coordination.k8s.io
    resources:
      - configmaps
      - leases
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - awspca.cert-manager.io
    resources:
      - awspcaclusterissuers
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - awspca.cert-manager.io
    resources:
      - awspcaclusterissuers/finalizers
    verbs:
      - update
  - apiGroups:
      - awspca.cert-manager.io
    resources:
      - awspcaclusterissuers/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - awspca.cert-manager.io
    resources:
      - awspcaissuers
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - awspca.cert-manager.io
    resources:
      - awspcaissuers/finalizers
    verbs:
      - update
  - apiGroups:
      - awspca.cert-manager.io
    resources:
      - awspcaissuers/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - cert-manager.io
    resources:
      - certificaterequests
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      - cert-manager.io
    resources:
      - certificaterequests/status
    verbs:
      - get
      - patch
      - update
---
# Source: aws-privateca-issuer/templates/rbac.yaml
# permissions to approve all awspca.cert-manager.io requests
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cert-manager-controller-approve:awspca-cert-manager-io
  labels:
    helm.sh/chart: aws-privateca-issuer-v1.2.7
    app.kubernetes.io/name: aws-privateca-issuer
    app.kubernetes.io/instance: v1.2.7
    app.kubernetes.io/version: "v1.2.7"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
    - cert-manager.io
    resources:
    - signers
    verbs:
    - approve
    resourceNames:
    - awspcaclusterissuers.awspca.cert-manager.io/*
    - awspcaissuers.awspca.cert-manager.io/*
---
# Source: aws-privateca-issuer/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: aws-privateca-issuer
  labels:
    helm.sh/chart: aws-privateca-issuer-v1.2.7
    app.kubernetes.io/name: aws-privateca-issuer
    app.kubernetes.io/instance: v1.2.7
    app.kubernetes.io/version: "v1.2.7"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: aws-privateca-issuer
subjects:
  - kind: ServiceAccount
    name: aws-privateca-issuer
    namespace: kube-system
---
# Source: aws-privateca-issuer/templates/rbac.yaml
# bind the approver ServiceAccount to approve all awspca.cert-manager.io
# CertificateRequests
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cert-manager-controller-approve:awspca-cert-manager-io
  labels:
    helm.sh/chart: aws-privateca-issuer-v1.2.7
    app.kubernetes.io/name: aws-privateca-issuer
    app.kubernetes.io/instance: v1.2.7
    app.kubernetes.io/version: "v1.2.7"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cert-manager-controller-approve:awspca-cert-manager-io
subjects:
- kind: ServiceAccount
  name: cert-manager
  namespace: kube-system
---
# Source: aws-privateca-issuer/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: aws-privateca-issuer
  namespace: kube-system
  labels:
    helm.sh/chart: aws-privateca-issuer-v1.2.7
    app.kubernetes.io/name: aws-privateca-issuer
    app.kubernetes.io/instance: v1.2.7
    app.kubernetes.io/version: "v1.2.7"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: aws-privateca-issuer
    app.kubernetes.io/instance: v1.2.7
---
# Source: aws-privateca-issuer/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aws-privateca-issuer
  namespace: kube-system
  labels:
    helm.sh/chart: aws-privateca-issuer-v1.2.7
    app.kubernetes.io/name: aws-privateca-issuer
    app.kubernetes.io/instance: v1.2.7
    app.kubernetes.io/version: "v1.2.7"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: aws-privateca-issuer
      app.kubernetes.io/instance: v1.2.7
  template:
    metadata:
      labels:
        app.kubernetes.io/name: aws-privateca-issuer
        app.kubernetes.io/instance: v1.2.7
    spec:
      serviceAccountName: aws-privateca-issuer
      securityContext:
        runAsUser: 65532
      containers:
        - name: aws-privateca-issuer
          securityContext:
            allowPrivilegeEscalation: false
          image: "public.ecr.aws/k1n1h4h4/cert-manager-aws-privateca-issuer:v1.2.7"
          imagePullPolicy: IfNotPresent
          command:
            - /manager
          args:
            - --leader-elect
          ports:
            - containerPort: 8080
              name: http
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8081
            initialDelaySeconds: 15
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8081
            initialDelaySeconds: 5
            periodSeconds: 10
      terminationGracePeriodSeconds: 10
